
//BSTree.template


#include <cstdlib> //NULL
#include <iostream>
#include <sstream> 
#include "BSTree.h"

using namespace std;

template <typename data_type>
ostream& operator << (ostream& outs, BSTree<data_type>& tree) 
{
	outs << "\n";
	//outs << tree.toString(); //print tree view
	outs << "\n";
	outs << tree.preorder(); //print preorder view
	return outs;
	
}


//CONSTRUCTOR
template <typename data_type> //set with data
BSTree<data_type>::BSTree(data_type& initdata){

	root = initdata;
	size = 1;

}
	template <typename data_type> //empty tree
BSTree<data_type>::BSTree(){

	
	root = NULL;
	size = 0;


}

//DESTRUCTOR
template <typename data_type>
BSTree<data_type>::~BSTree(){
	
	root->~BTNode();
	root = NULL;
	size = 0;

}


//////////////////////////////

template <class data_type>
string BSTree<data_type>::preorder() const {
	
	return preorder(root);

}

template <class data_type>
string BSTree<data_type>::preorder(BTNode<data_type>* currentnode) const {

	string str = ""; //string to be returned to the operator
	


	if (currentnode != NULL){

		//converts int to string so it is returned
		int numberconvert = currentnode->getData();     

		if (numberconvert != 0){

		string numberstring;     

		ostringstream convertint;  

		convertint << numberconvert;      

		numberstring = convertint.str();

		str += numberstring + " ";
	}
		str += preorder(currentnode->getLeft());
		str += preorder(currentnode->getRight());
		
	}

	return str;
}

template <typename data_type>
string BSTree<data_type>::toString(){

	return toString(root, 0);

}

	template <typename data_type>
string BSTree<data_type>::toString(BTNode<data_type>* currentnode, int level){

	string str = "";

	if (currentnode != NULL){

		str += toString(currentnode->getRight(), level + 1);




			for (int i=1; i <= level; i++){ //adds tree lines/link for display

				str = str + "| ";
				
			}
		//converts int to string so it is returned

			int numberconvert = currentnode->getData();     
			if (numberconvert != 0){

			string numberstring;     

			ostringstream convertint;  

			convertint << numberconvert;      

			numberstring = convertint.str();

			str += numberstring + "\n";
		}

			str += toString(currentnode->getLeft(), level + 1);



			
		}

		return str;

	} 

	template <typename data_type>
	int BSTree<data_type>::getSize(){

		return size;

	}

	template <typename data_type>
	void BSTree<data_type>::add(data_type newdata){
		if (root == NULL){ //create a new root if empty

			root = new BTNode<data_type>(newdata);
		}else{
			insert(root, newdata); //fill out tree

		}
		size++;

	}

	template <typename data_type>
	data_type BSTree<data_type>::getRoot() const{

		return root;

	}

	template <typename data_type>
	data_type BSTree<data_type>::search(data_type target){
		return find(root, target);


	}

	template <typename data_type>
	data_type BSTree<data_type>::find(BTNode<data_type>* currentnode, data_type target){

		if (currentnode == NULL){ //if nothing in the tree return -1

			return -1;

		} else {

			if (target == currentnode->getData()){ //if found return data


				return currentnode->getData();


			} else if (target > currentnode->getData()){ //if bigger go to right node

				return find(currentnode->getRight(), target);


			} else { // if smalled go to left node

				return find(currentnode->getLeft(), target);
			}

		}

	}

	template <typename data_type>
	void BSTree<data_type>::insert(BTNode<data_type>* currentnode, data_type& newdata){

 		if (newdata == currentnode->getData()){ //if the same add to current

 			currentnode->setData(newdata);

 		} else if (newdata > currentnode->getData()){ //if bigger add to right 

 			if(currentnode->getRight() == NULL){

 				currentnode->setRight(new BTNode<data_type>(newdata));
 				size++;

 			}else{

 				insert(currentnode->getRight(), newdata); //call function on right node
 			}	

 		}else {

 			if(currentnode->getLeft() == NULL){ //if smaller add to left
 				currentnode->setLeft(new BTNode<data_type>(newdata));
 				size++;
 			}else{

 				 insert(currentnode->getLeft(), newdata); //call function on left node
 				}
 			}
 		}



template <class data_type>
 		void BSTree<data_type>::remove(BTNode<data_type>* p){

	BTNode<data_type>* current; //node to traverse the tree
	BTNode<data_type>* trailCurrent; //pointer behind the current node

	//BTNode<data_type>* temp; //pointer to delete the node

	if (p == NULL){
		//do nothing

	} else if (p->getLeft() == NULL && p->getRight() == NULL){

		//temp = p;
		p->setData(0); //not deleting here for some reason
		p = NULL; 
		delete p;
		
		//delete temp;
		

		
	}/*else if (p->getLeft() == NULL){ //if left is null

		temp = p;
		p = temp->getRight();
		temp =NULL;
		delete temp;
	
		
	} else if (p->getRight() == NULL){ //if right is null

		
		temp = p;
		//p = temp->getLeft();
		temp =NULL;
		p = NULL;
		//delete temp;



	}*/ else{
		current = p->getLeft();
		trailCurrent = NULL;

		while (current->getRight() != NULL){

			trailCurrent = current;
			current = current->getRight();
		}

		p->getData() = current->getData();

		if (trailCurrent == NULL) 

			p->setLeft(current->getLeft());
		else
			trailCurrent->setRight(current->getLeft());
		delete current;
	}
} 

template <class data_type>
void BSTree<data_type>::remove(data_type deleteItem){

	BTNode<data_type> *current; //pointer to traverse the tree
	BTNode<data_type> *trailCurrent; //pointer behind current
	bool found = false;

	if (root == NULL){

		//cout << "Cannot delete from an empty tree." << endl; //for testing. to warn user that tree is empty

		}else{

			current = root;
			trailCurrent = root;

			while (current != NULL && !found){

				if (current->getData() == deleteItem)
					found = true;
				else {
					trailCurrent = current;

					if (current->getData() > deleteItem)
						current = current->getLeft();

					else
						current = current->getRight();
				}

			}

		if (current == NULL){
		//cout << "The item to be deleted is not in the tree." << endl; //printed in program to warn user.
		}
	else if (found)
	{

		if (current == root)
			remove(root);

		else if (trailCurrent->getData() > deleteItem)
			remove(trailCurrent->getLeft());

		else
			remove(trailCurrent->getRight());
	}

	else{
		//do nothing 
	}
}
}


